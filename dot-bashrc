#
# $HOME/.bashrc
#

if [[ -d "$HOME/bin" ]]
then
    export PATH="$PATH:$HOME/bin"
fi

if [[ -d "$HOME/npm/bin" ]]
then
    export PATH="$PATH:$HOME/npm/bin"
fi

if [[ -d "$HOME/go" && -d "$HOME/go/bin" ]]
then
    export GOPATH="$HOME/go"
    export PATH="$PATH:$HOME/go/bin"
fi

declare -r REBAR3_BIN="$HOME/.cache/rebar3/bin"
if [[ -x $REBAR3_BIN/rebar3 ]]
then
    export PATH="$PATH:$REBAR3_BIN"
fi

declare -r RBENV_ROOT="$HOME/.rbenv"
if [[ -d "$RBENV_ROOT/bin" ]]
then
    export RBENV_ROOT
    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"
fi

declare -r PYENV_ROOT="$HOME/.pyenv"
if [[ -d "$PYENV_ROOT/bin" ]]
then
    export PYENV_ROOT
    export PATH="$PYENV_ROOT/bin:$PATH"
    eval "$(pyenv init -)"
fi

if [[ -d $HOME/perl5 ]]
then
    eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)"
fi

declare -r KIEX="$HOME/.kiex/scripts/kiex"
if [[ -s $KIEX ]]
then
    source "$KIEX"
fi

if [[ -s /usr/local/etc/xml/catalog ]]
then
    export XML_CATALOG_FILES='/usr/local/etc/xml/catalog'
fi

_bashrc_sdkman_init="$HOME/.sdkman/bin/sdkman-init.sh"
if [[ -s $_bashrc_sdkman_init ]]
then
    source "$HOME/.sdkman/bin/sdkman-init.sh"
fi
unset _bashrc_sdkman_init

# If not running interactively, don't do anything past this point
[[ $- != *i* ]] && return

export HISTCONTROL=ignoreboth
export HISTSIZE=65536
export HISTFILESIZE=65536
export HISTFILE="$HOME/.bash_eternal_history"

shopt -s histappend
shopt -s checkwinsize
shopt -s direxpand

if [[ $MSYSTEM == 'MINGW64' ]]
then
    declare -r ssh_agent_pid_file='/tmp/.ssh/SSH_AGENT_PID.env'
    declare -r ssh_auth_sock_file='/tmp/.ssh/SSH_AUTH_SOCK.env'
    if [[ -s $ssh_agent_pid_file && -s $ssh_auth_sock_file ]]
    then
        export SSH_AGENT_PID="$(< $ssh_agent_pid_file)"
        export SSH_AUTH_SOCK="$(< $ssh_auth_sock_file)"
    fi
fi

if hash keychain 2>/dev/null
then
    eval "$(keychain --eval --agents ssh id_rsa)"
fi

if [[ $MSYSTEM == 'MINGW64' ]]
then
    if (( SSH_AGENT_PID > 0 )) && ps -p $SSH_AGENT_PID >/dev/null
    then
        declare -i tmp_ssh_agent_pid=0
        if [[ -s $ssh_agent_pid_file ]]
        then
            tmp_ssh_agent_pid="$(< $ssh_agent_pid_file)"
        fi
        if (( SSH_AGENT_PID != tmp_ssh_agent_pid ))
        then
            mkdir -p /tmp/.ssh
            echo $SSH_AGENT_PID > $ssh_agent_pid_file
            echo $SSH_AUTH_SOCK > $ssh_auth_sock_file
        fi
    fi
fi

if ! shopt -oq posix
then
  [[ -f /usr/share/bash-completion/bash_completion ]] && \
      source /usr/share/bash-completion/bash_completion
  [[ -f /usr/local/share/bash-completion/bash_completion ]] && \
      source /usr/local/share/bash-completion/bash_completion
  [[ -f /etc/bash_completion ]] && source /etc/bash_completion
fi

[[ -f $HOME/.bash_aliases ]] && source "$HOME/.bash_aliases"

PS1='[\u@\h \W]\$ '

if [[ $(type -t __git_ps1) != 'function' ]]
then
    git_cmpl=/usr/share/git/completion/git-completion.bash
    [[ -f $git_cmpl  ]] && source $git_cmpl
    git_cmpl=/usr/local/share/git-core/contrib/completion/git-completion.bash
    [[ -f $git_cmpl  ]] && source $git_cmpl
    git_cmpl=/etc/bash_completion.d/git
    [[ -f $git_cmpl  ]] && source $git_cmpl
    git_cmpl=/usr/local/etc/bash_completion.d/git-completion.bash
    [[ -f $git_cmpl  ]] && source $git_cmpl

    git_ps1=/usr/share/git/completion/git-prompt.sh
    [[ -f $git_ps1  ]] && source $git_ps1
    git_ps1=/usr/local/share/git-core/contrib/completion/git-prompt.sh
    [[ -f $git_ps1  ]] && source $git_ps1
    git_ps1="$HOME/.git-prompt.sh"
    [[ -f $git_ps1  ]] && source $git_ps1
    git_ps1=/etc/bash_completion.d/git-prompt
    [[ -f $git_ps1  ]] && source $git_ps1
    git_ps1=/usr/local/etc/bash_completion.d/git-prompt.sh
    [[ -f $git_ps1  ]] && source $git_ps1
fi

if [[ $(type -t __git_ps1) == 'function' ]]
then
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1
    export GIT_PS1_SHOWUPSTREAM='auto'
    export PS1='\[\033]0;\w\007\033[32m\]\u@\h \[\033[33m\w$(__git_ps1)\033[0m\]
$ '
fi

ppid_cmdline_f="/proc/$PPID/cmdline"
if [[ -f $ppid_cmdline_f ]]
then
    ppid_cmdline="$(tr -d '\0' < $ppid_cmdline_f)"
    if [[ $ppid_cmdline == *qterminal* || $ppid_cmdline == *konsole* ]]
    then
        export TERM=xterm-256color
    fi
fi

# declare -r rtrc="$HOME/.riak-test-rc"
# if [[ -s $rtrc ]]
# then
#     source $rtrc
# fi

# added by travis gem
# [[ -f $HOME/.travis/travis.sh ]] && source "$HOME/.travis/travis.sh"

if hash direnv 2>/dev/null
then
    # export DIRENV_LOG_FORMAT=
    eval "$(direnv hook bash)"
fi

if [[ -d "$HOME/.sdkman" ]] && [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]]
then
    export SDKMAN_DIR="$HOME/.sdkman"
    source "$SDKMAN_DIR/bin/sdkman-init.sh"
fi
